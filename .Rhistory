?toss
library(cointosses)
?toss
browseVignettes()
browseVignettes('lubridate')
vignette("lubridate")
edit(vignette("lubridate"))
library(devtools)
?use_vignette
use_vignette('my_vignette')
library(cointosses)
cointosses::toss(4)
packageVersion('devtools')
packageVersion('roxygen2')
toss()
devtools::load_all(".")
toss()
?toss
library(cointosses)
devtools::load_all(".")
?toss
cointosses::toss()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
tools::compactPDF()
library(tools)
tools::compactPDF()
?compactPDF
Sys.getenv('PATH')
devtools::load_all(".")
vignette('cointosses')
vignette('my_vignette')
library(cointosses)
vignette('cointosses')
browseVignettes()
browseEnv()
library(cointosses)
devtools::load_all(".")
?toss
library(cointosses)
library(cointosses)
toss()
temp <- available.packages()
temp
names(temp)
colnames(temp)
temp[,1]
'catdata' %in% temp[,1]
'dplyr' %in% temp[,1]
'pandoc' %in% temp[,1]
library(knitr)
library(cointosses)
library(cointosses)
toss()
library(cointosses)
devtools::build_vignettes()
library(cointosses)
new_coin <- function(success = 'H', failure = 'T', prob = 0.5){
if(!is.numeric(prob))stop('prob must be numeric')
if(prob <0 | prob >1)stop('prob must be between 0 and 1')
structure(list(success=success, failure=failure, prob=prob), class='coin')
}
x <- new_coin()
x$prob
ls()
library(cointosses)
x <- new_coin()
devtools::load_all(".")
x <- new_coin()
class(x)
x$success
x['H']
library(cointosses)
x <- new_coin()
?new_coin
library(cointosses)
x <- coin()
is.list(x)
library(cointosses)
devtools::load_all(".")
x <- coin()
toss(x, 10)
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(){
UseMethod("toss")
}
toss.coin <- function(mycoin,n){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
trial <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(trial == success, failure)
mycoin$trial = mytrial
}
toss.default <- function( n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
x <- coin()
toss(x,15)
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(mycoin, n = 1, prob = 0.5, success = 'H', failure = 'T'){
UseMethod("toss")
}
toss.coin <- function(mycoin,n){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
trial <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(trial == success, failure)
mycoin$trial = mytrial
}
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
x
class(x)
toss(x,15)
library(cointosses)
x <- coin()
toss(mycoin = x, n=10)
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(mycoin, n = 1, prob = 0.5, success = 'H', failure = 'T'){
UseMethod("toss")
}
toss.coin <- function(mycoin,n){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
trial <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(trial ==1, success, failure)
mycoin$trial = mytrial
}
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
library(cointosses)
x <- coin()
toss(mycoin = x, n = 15)
x
library(cointosses)
toss()
toss()
x <- coin(prob=0.7)
x <- toss(x, n=50)
x$trial
class(x)
x
devtools::load_all(".")
x <- coin()
x <- toss(x, n=50)
x
library(cointosses)
x <- coin()
x <- toss(x, n=50)
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(mycoin, n = 1, prob = 0.5, success = 'H', failure = 'T'){
UseMethod("toss")
}
toss.coin <- function(mycoin,n){
bern_vars <- stats::rbinom(n, size = 1, prob = mycoin$prob)
mytrial <- ifelse(bern_vars ==1, mycoin$success, mycoin$failure)
structure(list(success=success, failure=failure, prob=prob, trial=mytrial), class='coin')
}
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
x <- coin()
x <- toss(x, n=50)
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(mycoin, n = 1, prob = 0.5, success = 'H', failure = 'T'){
UseMethod("toss")
}
toss.coin <- function(mycoin,n){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
bern_vars <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(bern_vars ==1, success, failure)
structure(list(success=success, failure=failure, prob=prob, trial=mytrial), class='coin')
}
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param mycoin a coin object
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss <- function(mycoin, n = 1, prob = 0.5, success = 'H', failure = 'T'){
UseMethod("toss")
}
#' @title Toss a Coin
#' @description Toss a coin
#' @param mycoin an object of class coin
#' @param n the number of times to toss the coin
#' @export
toss.coin <- function(mycoin,n){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
bern_vars <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(bern_vars ==1, success, failure)
structure(list(success=success, failure=failure, prob=prob, trial=mytrial), class='coin')
}
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T'){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
x <- coin(50)
x <- toss(x, 50)
class(x)
devtools::load_all(".")
x <- cointosses::coin()
x <- cointosses::toss(x, 50)
x
str(x)
x
?toss
?toss.coin
?predict.lm
summary(coin)
summary(x)
library(cointosses)
x <- coin()
x <- toss(x, 50)
library(cointosses)
?toss
toss.coin
?toss.coin
ls()
x <- coin()
x <- toss(x,500)
x$trial
?predict
?predict.lm
library(cointosses)
library(cointosses)
toss()
toss(n=50)
x <- coin()
toss(x, 50)
x <- toss(x, 50)
x$trial
?toss.default
library(cointosses)
?toss
toss()
toss()
?predict
library(cointosses)
library(cointosses)
library(cointosses)
?predict.lm
?toss.coin
library(cointosses)
library(cointosses)
library(cointosses)
x <- toss()
class(x)
x <- coin()
x <- toss(x)
x <- toss(x, 50)
#' @title Coin Toss
#' @description A generic gunction to simulate the tossing of a coin
#' @param ... additional parameters that may be supplied.
#' @author Justin Strate
#' @export
toss <- function(...){
UseMethod("toss")
}
#' @title Toss a Coin
#' @description Toss a coin
#' @param mycoin an object of class coin
#' @param n the number of times to toss the coin
#' @param ... additional parameters that may be supplied.
#' @export
toss.coin <- function(mycoin,n, ...){
prob <- mycoin$prob
success <- mycoin$success
failure <- mycoin$failure
bern_vars <- stats::rbinom(n, size = 1, prob = prob)
mytrial <- ifelse(bern_vars ==1, success, failure)
structure(list(success=success, failure=failure, prob=prob, trial=mytrial), class='coin')
}
#' @title Coin Toss
#' @description Simulates the tossing of a coin n times.
#' @param n The number of times the coin is tossed
#' @param prob The probability of "Success"; default is 0.5 to simulate a fair coin
#' @param success Denotes "success"; default is "H"
#' @param failure Denotes "failure"; default is "T"
#' @param ... additional parameters that may be supplied.
#' @details Can also be thought of as simulating n bernoulli trials; not just coin tosses but any trial in which the outcome is binary.
#' @author Justin Strate
#' @export
toss.default <- function(n = 1, prob = 0.5, success = 'H', failure = 'T', ...){
x <- stats::rbinom(n,  size = 1, prob = prob)
out <- ifelse(x==1, success, failure)
return(out)
}
devtools::load_all(".")
x <- coin()
x <- toss(x, 50)
x
x$trial
library(cointosses)
x <- toss()
x
x <- coin()
class(x)
library(cointosses)
x <- coin()
y <- toss(x, 50, prob = 0.5)
x$success
x$failure
y$trial
toss()
toss()
toss()
toss()
devtools::use_testthat()
x <- c('H', 'H', 'T', 'H', 'H', 'H')
x <- numeric()
x <- c(x,1)
x
library(cointosses)
library(cointosses)
#' @title Streaks
#' @description Counts the streaks
#' @author Justin Strate
#' @return An integer vector that records the number of streaks of successes
#' @export
streaks(...) <- function(){
UseMethod("streaks")
}
#' @title streak
#' @description counts streaks
#' @author Justin Strate
#' @return an integer vector that records the number of success
#' @export
streaks.tossedCoin <- function(mycoin, ...){
success <- mycoin$success
trial <- mycoin$trial
x <- numeric()
counter <- 0
previous_item <- trial[1]
for(iter in 2:length(trial)){
item <- trial[iter]
if(item == success & previous_item == success){
counter <- counter + 1
} else if(iter != 1){
x <- c(x, counter)
}
previous_item <- trial[iter]
}
return(x)
}
x <- coin()
x <- toss(x, 50)
steaks(x)
streaks(x)
library(cointosses)
x <- coin()
x <- coin(prob = 0.9)
x <- toss(x, 50)
streaks.tossedCoin(x)
out <- streaks.tossedCoin(x)
length(out)
library(cointosses)
x <- coin(prob = 0.9)
x <- toss(x, n = 50)
x$trial
streaks(x)
library(cointosses)
x <- coin()
x <- toss(x, 50)
streaks(x)
y <- streaks(x)
length((y))
library(cointosses)
streaks(c('H', 'H', 'T', 'H','H', 'H'))
library(cointosses)
streaks(c('h', 'h', 't'))
debug(streaks.default)
library(cointosses)
streaks(c("H", "H", "T", "T", "H"))
library(cointosses)
streaks(c('H', 'H', 'T', 'H', 'T', 'T','h'))
debug(streaks)
streaks(c('H', 'H', 'T', 'H', 'T', 'T','h'))
if(previous_item == current_item){
count <- count + 1
} else{
streaks <- streaks(streak, count)
count <- 0
}
for(iter in 2:length(x)){
previous_item <- x[iter-1]
current_item <- x[iter]
if(previous_item == current_item){
count <- count + 1
} else{
streaks <- streaks(streak, count)
count <- 0
}
}
streak
streaks.default <- function(x, ...){
count <- 0
streak <- numeric()
for(iter in 2:length(x)){
previous_item <- x[iter-1]
current_item <- x[iter]
if(previous_item == current_item){
count <- count + 1
} else{
streaks <- streaks(streak, count)
count <- 0
}
}
streak
}
function(x, ...){
count <- 0
streak <- numeric()
for(iter in 2:length(x)){
previous_item <- x[iter-1]
current_item <- x[iter]
if(previous_item == current_item){
count <- count + 1
} else{
streaks <- streaks(streak, count)
count <- 0
}
}
streak
}
undebug(streaks)
library(cointosses)
library(cointosses)
streaks(c('h', 'h', 'h', 't', 't'))
run
streaks(c('H', 'H', 'H', 'T', "T"))
library(cointosses)
streaks(c('h', 'h', 'h', 't', 't'))
library(cointosses)
streaks(c('h', 'h', 'h', 't', 't', 'h'))
